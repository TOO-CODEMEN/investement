openapi: "3.0.2"
info:
  title: Advanced User API
  version: 1.0.0
servers:
  - url: http://localhost:8080/

tags:
  - name: Advanced User

paths:
  /api/advancedUsers/{id}:
    get:
      tags:
        - Advanced User
      description: Get advanced user by ID
      operationId: getAdvancedUserById
      summary: Get advanced user
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        200:
          $ref: '#/components/responses/AdvancedUser'
        404:
          $ref: '#/components/responses/UserNotFoundError'

  /api/advancedUsers:
    post:
      tags:
        - Advanced User
      description: Create advanced user
      operationId: createAdvancedUser
      summary: Create advanced user
      requestBody:
        $ref: "#/components/requestBodies/CreateAdvancedUser"
      responses:
        200:
          $ref: '#/components/responses/AdvancedUser'
        400:
          $ref: '#/components/responses/InputValidationError'

    put:
      tags:
        - Advanced User
      description: Update advanced user by ID
      operationId: updateAdvancedUserById
      summary: Update advanced user
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        $ref: "#/components/requestBodies/CreateAdvancedUser"
      responses:
        200:
          $ref: '#/components/responses/AdvancedUser'
        400:
          $ref: '#/components/responses/InputValidationError'
        404:
          $ref: '#/components/responses/UserNotFoundError'

    delete:
      tags:
        - Advanced User
      description: Delete advanced user by ID
      operationId: deleteAdvancedUserById
      summary: Delete advanced user
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        200:
          $ref: '#/components/responses/AdvancedUser'
        404:
          $ref: '#/components/responses/UserNotFoundError'

components:
  parameters:
    PathId:
      name: id
      in: path
      description: ID in path
      required: true
      schema:
        type: integer
        minimum: 1

  requestBodies:
    CreateAdvancedUser:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateAdvancedUser"

  responses:
    AdvancedUser:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdvancedUser"

    UserNotFoundError:
      description: User not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InputValidationError:
      description: Invalid input parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    AdvancedUser:
      type: object
      properties:
        id:
          type: integer
          nullable: false
          minimum: 1
        name:
          type: string
          nullable: false
        surname:
          type: string
          nullable: false
        patronymic:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        phone:
          type: string
          nullable: false
      example:
        id: 1
        name: John
        surname: Doe
        patronymic: Smith
        email: john.doe@example.com
        phone: +1234567890

    CreateAdvancedUser:
      type: object
      properties:
        name:
          type: string
          nullable: false
        surname:
          type: string
          nullable: false
        patronymic:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        phone:
          type: string
          nullable: false
      example:
        name: John
        surname: Doe
        patronymic: Smith
        email: john.doe@example.com
        phone: +1234567890

    Error:
      type: object
      properties:
        errorMessage:
          type: string
          nullable: false
      example:
        errorMessage: error.message
